function sysCall_init()
 -- do some initialization here
 RobotBase = 
sim.getObjectAssociatedWithScript(sim.handle_self)
 M1 = sim.getObjectHandle('M1')
 M2 = sim.getObjectHandle('M2')
 M3 = sim.getObjectHandle('M3')
 M4 = sim.getObjectHandle('M4')
 
 P11 = sim.getObjectHandle('P11')
 P12 = sim.getObjectHandle('P12')
 P13 = sim.getObjectHandle('P13')
 P14 = sim.getObjectHandle('P14')
 P15 = sim.getObjectHandle('P15')
 P16 = sim.getObjectHandle('P16')
 
 sim.setJointTargetVelocity(M1,0)
 sim.setJointTargetVelocity(M2,0)
 sim.setJointTargetVelocity(M3,0)
 sim.setJointTargetVelocity(M4,0)
 
 totError = 0.0
 lastError = 0.0
 number = 0
 
 file = io.open("CentreCoordinates.txt", "r")
end
function sysCall_actuation()
  if(D11 == nil) then
 D11=1
 end
  if(D12 == nil) then
 D12=1
 end
  if(D13 == nil) then
 D13=1
 end
  if(D14 == nil) then
 D14=1
 end
  if(D15 == nil) then
 D15=1
 end
  if(D16 == nil) then
 D16=1
 end
 
 if(D15>0.3) then 
  c=1
 elseif(D15<0.3) then
  c=2
 end
 
 print(D11)
 print(D12)
V01 = PID(D11,D12)
 
 if(c==1) then
 sim.setJointTargetVelocity(M1,-(1+V01))
 sim.setJointTargetVelocity(M2,-(1+V01))
 sim.setJointTargetVelocity(M4,-(1-V01))
 sim.setJointTargetVelocity(M3,-(1-V01))
 elseif(c==2) then
 moveRight()
 end 

end
function sysCall_sensing()
 -- put your sensing code here
 D11 = getDistance(P11)
 D12 = getDistance(P12)
 D13 = getDistance(P13)
 D14 = getDistance(P14)
 D15 = getDistance(P15)
 D16 = getDistance(P16)
 simTime=sim.getSimulationTime()
 
 
end

function sysCall_cleanup()
 -- do some clean-up here
end
-- See the user manual or the available code snippets for 
additional callback functions and details
function getDistance(sensor)
 local detected, distance
 detected, distance = sim.readProximitySensor(sensor)
 if (detected<1) then
 distance = 1.0
 end
 return distance
end
 -- ABC
function PID(Distance1, Distance2)
 T = 0.5
 Kp = 25
 Kd = 22
 p=0.7
 q=0.7
 error = (Distance1-Distance2)*p + (0.2-(Distance1+Distance2)/2)*q
 totError = error + totError
 deltaError = error - lastError
 simTime1=sim.getSimulationTime()
 Control = Kp*error + (Kd)*deltaError 
 lastError = error 
 return(Control)
end

function moveRight()
sim.setJointTargetVelocity(M1,-1)
sim.setJointTargetVelocity(M2,-1)
sim.setJointTargetVelocity(M3,0)
sim.setJointTargetVelocity(M4,0)
end

function moveLeft()
sim.setJointTargetVelocity(M4,-1)
sim.setJointTargetVelocity(M3,-1)
sim.setJointTargetVelocity(M2,0)
sim.setJointTargetVelocity(M1,0)
end